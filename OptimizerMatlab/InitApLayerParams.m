function [generateSpeedEquivalentAP,...
    divisionPercentageEquivalentAP,...
    betaSum,...
    generateSpeedAP,...
    computeCapacityAP,...
    divisionPercentageAP,...
    transmitSpeedAP]...
    = InitApLayerParams(...
    nAP,...
    rho,...
    totalComputeResourceAP,...
    childStartIdx,...
    nChilds,...
    divisionPercentageED,... 
    transmitSpeedED ...
    )
% after division percentage at ED update
% we should update some other params

%%
% init params
generateSpeedEquivalentAP = nChilds * 0;
divisionPercentageEquivalentAP = generateSpeedEquivalentAP;
betaSum = generateSpeedEquivalentAP;

generateSpeedAP = transmitSpeedED * 0;
computeCapacityAP = generateSpeedAP;
betaAP = generateSpeedAP;
divisionPercentageAP = generateSpeedAP;
for i = 1:nAP
    startIdx = childStartIdx(i);
    endIdx = startIdx + nChilds(i) -1;
    % compute params in AP layer: genrate speed & compute capacity
    % allocated to each EDs
    generateSpeedAP(startIdx:endIdx) = ...
        transmitSpeedED(startIdx:endIdx)...
        .* (1 - divisionPercentageED(startIdx:endIdx))...
        ./ (1 + (rho - 1) * divisionPercentageED(startIdx:endIdx));
    generateSpeedEquivalentAP(i) = sum(generateSpeedAP(startIdx:endIdx));
    
    % compute capacity allcated to each ED
    computeCapacityAP(startIdx:endIdx) = ...
        generateSpeedAP(startIdx:endIdx) ...
        / sum(generateSpeedAP(startIdx:endIdx))...
        * totalComputeResourceAP(i);
    
    % compute division percentage at AP 
    divisionPercentageAP(startIdx:endIdx) = ...
        computeCapacityAP(startIdx:endIdx)...
        ./ generateSpeedAP(startIdx:endIdx);
    
    % in fact, a AP has the same division percentage for all it's ED's task
    divisionPercentageEquivalentAP(i) = ...
        sum(divisionPercentageAP(startIdx:endIdx)...
        .* generateSpeedAP(startIdx:endIdx))...
        ./ sum(generateSpeedAP(startIdx:endIdx));
    
    % compute beta and sum beta
    betaAP(startIdx:endIdx) = transmitSpeedED(startIdx:endIdx) - generateSpeedAP(startIdx:endIdx);
    betaSum(i) = sum(betaAP(startIdx:endIdx));
end

% transmit speed at AP
transmitSpeedAP = ...
    generateSpeedAP .* (1 + (rho - 1) * divisionPercentageAP)...
    + betaAP;

end

